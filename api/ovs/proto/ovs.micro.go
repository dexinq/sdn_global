// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/ovs/proto/ovs.proto

package ovs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "global/global_proto/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Ovs service

type OvsService interface {
	AddNetflow(ctx context.Context, in *Netflow, opts ...client.CallOption) (*proto1.Response, error)
}

type ovsService struct {
	c    client.Client
	name string
}

func NewOvsService(name string, c client.Client) OvsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ovs"
	}
	return &ovsService{
		c:    c,
		name: name,
	}
}

func (c *ovsService) AddNetflow(ctx context.Context, in *Netflow, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Ovs.AddNetflow", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ovs service

type OvsHandler interface {
	AddNetflow(context.Context, *Netflow, *proto1.Response) error
}

func RegisterOvsHandler(s server.Server, hdlr OvsHandler, opts ...server.HandlerOption) error {
	type ovs interface {
		AddNetflow(ctx context.Context, in *Netflow, out *proto1.Response) error
	}
	type Ovs struct {
		ovs
	}
	h := &ovsHandler{hdlr}
	return s.Handle(s.NewHandler(&Ovs{h}, opts...))
}

type ovsHandler struct {
	OvsHandler
}

func (h *ovsHandler) AddNetflow(ctx context.Context, in *Netflow, out *proto1.Response) error {
	return h.OvsHandler.AddNetflow(ctx, in, out)
}
