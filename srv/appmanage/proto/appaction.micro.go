// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/appmanage/proto/appaction.proto

package appaction

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "global/global_proto/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AppAction service

type AppActionService interface {
	GetAppObject(ctx context.Context, in *PlaceHolder, opts ...client.CallOption) (*AppListResponse, error)
	UpdateAppObject(ctx context.Context, in *AppObject, opts ...client.CallOption) (*proto1.Response, error)
	AddAppObject(ctx context.Context, in *AppObject, opts ...client.CallOption) (*proto1.Response, error)
}

type appActionService struct {
	c    client.Client
	name string
}

func NewAppActionService(name string, c client.Client) AppActionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "appaction"
	}
	return &appActionService{
		c:    c,
		name: name,
	}
}

func (c *appActionService) GetAppObject(ctx context.Context, in *PlaceHolder, opts ...client.CallOption) (*AppListResponse, error) {
	req := c.c.NewRequest(c.name, "AppAction.GetAppObject", in)
	out := new(AppListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appActionService) UpdateAppObject(ctx context.Context, in *AppObject, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "AppAction.UpdateAppObject", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appActionService) AddAppObject(ctx context.Context, in *AppObject, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "AppAction.AddAppObject", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppAction service

type AppActionHandler interface {
	GetAppObject(context.Context, *PlaceHolder, *AppListResponse) error
	UpdateAppObject(context.Context, *AppObject, *proto1.Response) error
	AddAppObject(context.Context, *AppObject, *proto1.Response) error
}

func RegisterAppActionHandler(s server.Server, hdlr AppActionHandler, opts ...server.HandlerOption) error {
	type appAction interface {
		GetAppObject(ctx context.Context, in *PlaceHolder, out *AppListResponse) error
		UpdateAppObject(ctx context.Context, in *AppObject, out *proto1.Response) error
		AddAppObject(ctx context.Context, in *AppObject, out *proto1.Response) error
	}
	type AppAction struct {
		appAction
	}
	h := &appActionHandler{hdlr}
	return s.Handle(s.NewHandler(&AppAction{h}, opts...))
}

type appActionHandler struct {
	AppActionHandler
}

func (h *appActionHandler) GetAppObject(ctx context.Context, in *PlaceHolder, out *AppListResponse) error {
	return h.AppActionHandler.GetAppObject(ctx, in, out)
}

func (h *appActionHandler) UpdateAppObject(ctx context.Context, in *AppObject, out *proto1.Response) error {
	return h.AppActionHandler.UpdateAppObject(ctx, in, out)
}

func (h *appActionHandler) AddAppObject(ctx context.Context, in *AppObject, out *proto1.Response) error {
	return h.AppActionHandler.AddAppObject(ctx, in, out)
}
