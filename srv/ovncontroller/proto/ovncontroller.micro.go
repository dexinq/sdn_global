// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/ovncontroller/proto/ovncontroller.proto

package ovncontroller

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "global/global_proto/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LogicalSwitchAction service

type LogicalSwitchActionService interface {
	GetLogicalSwitchInfo(ctx context.Context, in *LSwitchRequest, opts ...client.CallOption) (*LSwitchGetterResponse, error)
	ModifyLogicalSwitch(ctx context.Context, in *LSwitchRequest, opts ...client.CallOption) (*proto1.Response, error)
	AddLogicalSwitch(ctx context.Context, in *LSwitchRequest, opts ...client.CallOption) (*proto1.Response, error)
}

type logicalSwitchActionService struct {
	c    client.Client
	name string
}

func NewLogicalSwitchActionService(name string, c client.Client) LogicalSwitchActionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ovncontroller"
	}
	return &logicalSwitchActionService{
		c:    c,
		name: name,
	}
}

func (c *logicalSwitchActionService) GetLogicalSwitchInfo(ctx context.Context, in *LSwitchRequest, opts ...client.CallOption) (*LSwitchGetterResponse, error) {
	req := c.c.NewRequest(c.name, "LogicalSwitchAction.GetLogicalSwitchInfo", in)
	out := new(LSwitchGetterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalSwitchActionService) ModifyLogicalSwitch(ctx context.Context, in *LSwitchRequest, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "LogicalSwitchAction.ModifyLogicalSwitch", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalSwitchActionService) AddLogicalSwitch(ctx context.Context, in *LSwitchRequest, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "LogicalSwitchAction.AddLogicalSwitch", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogicalSwitchAction service

type LogicalSwitchActionHandler interface {
	GetLogicalSwitchInfo(context.Context, *LSwitchRequest, *LSwitchGetterResponse) error
	ModifyLogicalSwitch(context.Context, *LSwitchRequest, *proto1.Response) error
	AddLogicalSwitch(context.Context, *LSwitchRequest, *proto1.Response) error
}

func RegisterLogicalSwitchActionHandler(s server.Server, hdlr LogicalSwitchActionHandler, opts ...server.HandlerOption) error {
	type logicalSwitchAction interface {
		GetLogicalSwitchInfo(ctx context.Context, in *LSwitchRequest, out *LSwitchGetterResponse) error
		ModifyLogicalSwitch(ctx context.Context, in *LSwitchRequest, out *proto1.Response) error
		AddLogicalSwitch(ctx context.Context, in *LSwitchRequest, out *proto1.Response) error
	}
	type LogicalSwitchAction struct {
		logicalSwitchAction
	}
	h := &logicalSwitchActionHandler{hdlr}
	return s.Handle(s.NewHandler(&LogicalSwitchAction{h}, opts...))
}

type logicalSwitchActionHandler struct {
	LogicalSwitchActionHandler
}

func (h *logicalSwitchActionHandler) GetLogicalSwitchInfo(ctx context.Context, in *LSwitchRequest, out *LSwitchGetterResponse) error {
	return h.LogicalSwitchActionHandler.GetLogicalSwitchInfo(ctx, in, out)
}

func (h *logicalSwitchActionHandler) ModifyLogicalSwitch(ctx context.Context, in *LSwitchRequest, out *proto1.Response) error {
	return h.LogicalSwitchActionHandler.ModifyLogicalSwitch(ctx, in, out)
}

func (h *logicalSwitchActionHandler) AddLogicalSwitch(ctx context.Context, in *LSwitchRequest, out *proto1.Response) error {
	return h.LogicalSwitchActionHandler.AddLogicalSwitch(ctx, in, out)
}

// Client API for LogicalRouterAction service

type LogicalRouterActionService interface {
	GetLogicalRouterInfo(ctx context.Context, in *LRouterRequest, opts ...client.CallOption) (*LRouterGetterResponse, error)
	ModifyLogicalRouter(ctx context.Context, in *LRouterRequest, opts ...client.CallOption) (*proto1.Response, error)
	AddLogicalRouter(ctx context.Context, in *LRouterRequest, opts ...client.CallOption) (*proto1.Response, error)
}

type logicalRouterActionService struct {
	c    client.Client
	name string
}

func NewLogicalRouterActionService(name string, c client.Client) LogicalRouterActionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ovncontroller"
	}
	return &logicalRouterActionService{
		c:    c,
		name: name,
	}
}

func (c *logicalRouterActionService) GetLogicalRouterInfo(ctx context.Context, in *LRouterRequest, opts ...client.CallOption) (*LRouterGetterResponse, error) {
	req := c.c.NewRequest(c.name, "LogicalRouterAction.GetLogicalRouterInfo", in)
	out := new(LRouterGetterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalRouterActionService) ModifyLogicalRouter(ctx context.Context, in *LRouterRequest, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "LogicalRouterAction.ModifyLogicalRouter", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicalRouterActionService) AddLogicalRouter(ctx context.Context, in *LRouterRequest, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "LogicalRouterAction.AddLogicalRouter", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogicalRouterAction service

type LogicalRouterActionHandler interface {
	GetLogicalRouterInfo(context.Context, *LRouterRequest, *LRouterGetterResponse) error
	ModifyLogicalRouter(context.Context, *LRouterRequest, *proto1.Response) error
	AddLogicalRouter(context.Context, *LRouterRequest, *proto1.Response) error
}

func RegisterLogicalRouterActionHandler(s server.Server, hdlr LogicalRouterActionHandler, opts ...server.HandlerOption) error {
	type logicalRouterAction interface {
		GetLogicalRouterInfo(ctx context.Context, in *LRouterRequest, out *LRouterGetterResponse) error
		ModifyLogicalRouter(ctx context.Context, in *LRouterRequest, out *proto1.Response) error
		AddLogicalRouter(ctx context.Context, in *LRouterRequest, out *proto1.Response) error
	}
	type LogicalRouterAction struct {
		logicalRouterAction
	}
	h := &logicalRouterActionHandler{hdlr}
	return s.Handle(s.NewHandler(&LogicalRouterAction{h}, opts...))
}

type logicalRouterActionHandler struct {
	LogicalRouterActionHandler
}

func (h *logicalRouterActionHandler) GetLogicalRouterInfo(ctx context.Context, in *LRouterRequest, out *LRouterGetterResponse) error {
	return h.LogicalRouterActionHandler.GetLogicalRouterInfo(ctx, in, out)
}

func (h *logicalRouterActionHandler) ModifyLogicalRouter(ctx context.Context, in *LRouterRequest, out *proto1.Response) error {
	return h.LogicalRouterActionHandler.ModifyLogicalRouter(ctx, in, out)
}

func (h *logicalRouterActionHandler) AddLogicalRouter(ctx context.Context, in *LRouterRequest, out *proto1.Response) error {
	return h.LogicalRouterActionHandler.AddLogicalRouter(ctx, in, out)
}
